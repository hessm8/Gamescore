@model MatchViewModel
@{
    ViewData["Title"] = "Add match";
}

<div id="app">
    @using (Html.BeginForm("Match", "Games", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.Game)                

        <div id="match-content" class="d-flex flex-column p-3">

            <!-- Main info section -->
            <div id="main-info" class="d-flex flex-row me-5">

                <div>
                    <a href="/game/@Model.Game.Alias" title="Return to game page">
                        <img class="game-image" src="@($"/data/games/{Model.Game.Alias}/image.png")" />
                    </a>
                </div>

                <div id="match-data" class="d-flex flex-column">
                    <div class="form-group">
                        <label for="match-date">Date</label>
                        <input type="date" class="form-control" id="match-date"
                            :value="convertDate(playDate)"
                            v-on:input="playDate = $event.target.valueAsDate"
                        >
                    </div>

                    <div class="form-group">
                        <label for="match-place">Place</label>
                        <input type="text" class="form-control" id="match-place" v-model="playPlace">
                    </div>

                    <div class="form-group">
                        <label for="match-duration">Duration (minutes)</label>
                        <input type="number" class="form-control" id="match-duration" v-model="playDuration">
                        <small>{{calcDuration}}</small>
                    </div>

                            
                </div>

                <div id="group-text" class="form-group">
                    <label for="commentArea" class="control-label">Comment</label>
                    <textarea class="form-control" id="commentArea" rows="7"></textarea>
                </div>  

            </div>

            <hr>

            <!-- Players section -->
            <div id="match-players">

                <h3>Players</h3>

                <!-- Detailed view switch -->
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" v-model="enableDetailedView">
                    <label class="form-check-label" for="flexSwitchCheckDefault">Detailed view</label>
                </div>

                <!-- Views for players -->
                <transition name="fade" mode="out-in">
                    <div v-if="!enableDetailedView" key="playerView">
                                
                        <template v-for="player in players">
                            <p><b>{{player.userName}}</b></p>
                        </template>

                    </div>
                    <div v-else key="detailedView">

                        <template v-for="player in players">
                            <p><b>{{player.userName}}</b>:</p>
                            <p>{{player.team}} - {{player.points}} - {{player.isWinner}}</p>
                        </template>

                    </div>
                </transition>

            </div>

            <div class="form-group">
                <input class="btn btn-primary" type="submit" value="Submit" />
            </div>

            <hr>

            <div id="match-search">
                <h3>Search</h3>
                <input type="search" v-model="search.user">
                <p v-if="search.user.length > 0" v-on:click="addPlayerFromSearch">"{{search.user}}" (non-user player)</p>
                <template v-for="found in search.usersFound">
                    <p v-on:click="() => addPlayer(found)">{{found}}</p>
                </template>
            </div>

        </div>
    }
</div>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            search: {
                user: '',
                usersFound: [],
                timeout: null
            },
            

            enableDetailedView: false,
            gameAlias: '@Model.Game.Alias',
            playDate: new Date(),
            playPlace: '',
            playDuration: 0,
            players: [
                /*{ 
                    userName: 'TheJack', 
                    team: 'Red',
                    points: 9,
                    isWinner: true
                }*/
            ]
        },
        watch: {
            'search.user': function (newInput) {
                this.getSearchResults(newInput);
            }
        },
        computed: {
            calcDuration: function(){
                let timeHours = Math.floor(this.playDuration / 60);
                let timeMinutes = this.playDuration - timeHours * 60;
                return `~ ${timeHours} hours, ${timeMinutes} minutes`;
            }
        },
        methods: {
            convertDate: function(d) {
    	        return d && new Date(d.getTime()-(d.getTimezoneOffset()*60*1000)).toISOString().split('T')[0]
            },

            // currently gets users but players are also needed
            getSearchResults: function (searchQuery) {
                let self = this;                              
	            
	            const searchFunc = () => {
                    fetch('@Url.Action("GetSearchUsers", "Games")?'
                    + new URLSearchParams({
                        search: searchQuery
                        })
                    )
		            .then(response => response.json())
		            .then(data => self.search.usersFound = data);
                }

                clearTimeout(self.search.timeout);  
                self.search.timeout = setTimeout(searchFunc, 300)
            },

            addPlayer: function(user) {
                let addedIndex = this.players.findIndex(p => p.userName == user);

                if (addedIndex == -1) {
                    let player = {
                        userName: user,
                        owner: null
                    };
                    this.players.push(player);
                } else {
                    this.players.splice(addedIndex, 1);
                }
            },
            addPlayerFromSearch: function() {
                let player = {
                    userName: this.search.user,
                    owner: null
                };
                this.players.push(player);
            }
        }
    })
</script>

