@using Microsoft.AspNetCore.Html
@model UserProfileViewModel
@{
    ViewData["Title"] = $"User page";
}

@functions {
    public static string LastLoginDisplay(DateTime? date)
    {
        if (date == null) return "?";
        var diff = DateTime.Now.Subtract(date.Value);

        if (diff.Hours < 1) return "less than a hour ago";

        string output = $"{diff.Hours} hours ago";
        if (diff.Days > 0) output.Insert(0, $"{diff.Days} days, ");

        return output;
    }
}

<div id="profile">

    @if (Model.IsMe)
    {
        <p>
            <b><a asp-area="Identity" asp-page="/Account/Manage/Index" >Account settings</a></b>
        </p>
    }

    <div id="info" class="d-flex flex-row mb-4">

        <div class="main-info d-flex flex-column">

            <h1 title="Username">@Model.User.UserName</h1>
            @if (!string.IsNullOrEmpty(Model.User.FullName))
            {
                <p class="title-secondary" title="Full name">@Html.DisplayFor(m => m.User.FullName)</p>
            }

            <div class="user-info d-flex flex-column">                    
                <p><span class="user-property">Gender:</span> @Html.DisplayFor(m => m.User.Gender)</p>
                <p><span class="user-property">Last login:</span>  @LastLoginDisplay(Model.User.LastLoginTime)</p>
            </div>

            <div class="user-info mt-4">
                <h4>Game stats</h4>
                <p>Owned: @Model.User.GamesFavorited.Count</p>
                <p>Rated: @Model.User.GamesRated.Count</p>
            </div>
        </div>        

        <div class="card friends">

            <div class="card-body d-flex flex-column">

                <div><h3>Friends</h3></div>

                <ul class="friends-items">
                @foreach (var friend in @Model.Friends)
                {
                    <li>
                        <a href="~/user/@friend.UserName">@friend.UserName</a> 
                    </li>
                }    
                </ul>

                <div class="lower-block">
                    <div class="friends-request">
                        @if (Model.Friends.Count() < 1)
                        {
                            <p class="title-secondary">This user has no friends :(</p>
                        }

                        @if (Model.LoggedIn && !Model.IsMe)
                        {

                            if (Model.Friendship == null)
                            {
                                <input type="button" class="btn btn-primary" value="Add as friend" 
                                    onclick="location.href='@Url.Action("ManageFriend", "user", 
                                    new { username = Model.User.UserName, requestAction = "add" })'" 
                                />
                            }    
                            else if (Model.Friendship.Value.status == FriendStatus.Pending && !Model.Friendship.Value.received)
                            {
                                <p>You've sent a friend request</p>

                            } else if (Model.Friendship.Value.status == FriendStatus.Pending && Model.Friendship.Value.received)
                            {
                                <p class="title-secondary">This user sent you a friend request</p>
                                <div class="buttons">
                                    <input type="button" class="btn btn-primary" value="Accept" 
                                        onclick="location.href='@Url.Action("ManageFriend", "user",
                                        new { username = Model.User.UserName, requestAction = "accept" })'" 
                                    />
                                    <input type="button" class="btn btn-danger" value="Decline" 
                                        onclick="location.href='@Url.Action("ManageFriend", "user", 
                                        new { username = Model.User.UserName, requestAction = "decline" })'" 
                                    />
                                </div>
                            } 
                        }
                    </div>
                </div>

            </div>
        </div>
        
    </div>

    <hr />
        
    <h3>Collection</h3>

    @*@if (Model.IsMe)
    {
        <button id="addGame" class="btn btn-secondary btn-sm" onclick="toggleModal()">+</button>
    }*@

    @if (Model.User.GamesFavorited.Count < 1)
    {
        <p class="title-secondary">This user's collection is empty...</p>
    }

    <div class="profile-games">

        <div></div>

        @foreach (var entity in Model.User.GamesFavorited)
        {
            <div class="item">            
                <a href="~/game/@entity.Alias">
                    <img class="entity-image small" title="@entity.Name" src="@($"/data/games/{entity.Alias}/image.png")" />
                </a>

            </div>
        }
    </div>  
    
    @if (Model.LoggedPlays != null && Model.LoggedPlays.Count() > 0) {
        <h4>Last played</h4>
        <ul>        
            @foreach (var play in Model.LoggedPlays)
            {
                <li>@play.Game.Name - @play.Date.Value.ToShortDateString()</li>
            }
        </ul>    
    }
    
</div>

@*@Html.Partial("AddToCollection", new UserGameViewModel())*@

@section Scripts
{
 <script>

     //function toggleModal() {
     //    $('.modal').toggle();
     //}

 </script>
} 
